############################################################
#  	JDK 1.5 Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#      JDK 1.5 Log Level vs Log4j Priority
#
# Note: we must use JDK 1.5 Log Level in this property file
#
# Old Log4j priorities are:
# FATAL, ERROR, WARN, INFO and DEBUG.
# These priorities are mapped to JDK 1.5 level as shown in
# the table below:
#
# JDK14 Level  Log4j Priority
# --------     ---------
# FINEST       n/a    (lowset)
# FINER        n/a
# FINE         DEBUG
# CONFIG       n/a
# INFO         INFO
# WARNING      WARN
# SEVERE       ERROR
# SEVERE       FATAL  (highest)
#
# In addition JDK 1.5 defines level OFF that can be used to  
# turn off logging, and a level ALL that can be used to enable 
# logging of all messages
############################################################

############################################################
#  	Global properties
############################################################

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level.
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# Set the logging level for the root of the namespace.
# This becomes the default logging level for all Loggers.

.level=SEVERE
#examples of changing default log level for all codes
#debug:
#.level=FINE
#info:
#.level=INFO
#error and fatal:
#.level=SEVERE

# Flag that tells us to generate the context information in log messages
# (Default=false)
# Note: this is an Logger specific flag and is ignored by
# JDK 1.5 logger
.logContextInfo=true

# Log trace throttle configuration
# Size of log buffer to cache log entries
.logBufferSize=100
# Log buffer entry timeout - no. of millis after which log entry is reset
.logBufferEntryTimeout=120000
# log buffer entry max hit count - No of times log entry reused before its reset
.logBufferEntryMaxHits=50
# The no. of times a log entry is printed along with the trace when the 
# exception occurs for the first time or when it gets reset
.maxLogCount=5

# To control logging output from different packages in the code,
# add a <package_name>.level property as examples shown
# below and set the desired logging level.

# List of global handlers (a comma separated list of log Handler classes)
# These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
handlers = java.util.logging.ConsoleHandler
